#!/usr/bin/env python
"""
The referi module
"""
import argparse
import os
import importlib
import pygame
import random
from pygame.locals import *
from importlib.util import spec_from_file_location
from definitions.world import world

default_players = tuple(map(
    lambda x:x.split('.')[0],
    filter(
        lambda x:x.endswith('.py'),
        os.listdir('players')
    )
))

def main(players):
    pygame.init()
    screen = pygame.display.set_mode((395, 395))
    pygame.display.set_caption('Supercat referi')
    clock = pygame.time.Clock()
    board = pygame.image.load('src/board.png')
    icons = {
        "X": pygame.image.load('src/square.png'),
        "O": pygame.image.load('src/circle.png'),
    }

    print ('Begining the game...')
    print ('Flipping the coin...')

    assigns = {
        "X": "player1",
        "O": "player2",
    }

    if random.choice([0, 1]) == 1:
        print ('Squares given to player 2')
        players.reverse()
        assigns["X"] = "player2",
        assigns["O"] = "player1",
    else:
        print ('Squares given to player 1')

    pieces = ("X", "O")
    turn = False
    move = 1
    game_should_play = None

    while True:
        for event in pygame.event.get():
            if event.type == KEYDOWN and event.key == 27:
                # ESC key, exit game
                return
            elif event.type == QUIT:
                # Handles window close button
                return
        # Make the player play
        game, pos = players[turn].play(
            world.copy(),
            game_should_play,
            pieces[turn],
            move,
        )

        # Player made an invalid move
        if game_should_play is not None and game_should_play != game:
            print ("%s did not play the game he should!"%assigns[pieces[turn]])

        # Handle surrenders
        if game is None:
            print ("%s surrenders!"%assigns[pieces[turn]])
            break

        # Set the world to the new status
        world[game][pos] = pieces[turn]
        game_should_play = pos

        # Paint the board
        screen.fill((255, 255, 255))
        screen.blit(board, (0, 0))

        # Paint the game status
        for g_row in range(3):
            for g_col in range(3):
                if world[g_row, g_col]['owner'] in ['X', 'O']:
                    # draw a big one
                    continue

                for row in range(3):
                    for col in range(3):
                        if world[g_row, g_col][row, col] in ['X', 'O']:
                            # draw a small one
                            coordinates = g_row*(105+30) + row*(25 + 15) + 10, g_col*(105 + 30) + col*(25 + 15) + 10
                            screen.blit(icons[world[g_row, g_col][row, col]], coordinates)

        pygame.display.flip()

        turn = not turn
        move += 1

        # tick to 1 fps
        clock.tick(1)

if __name__ == '__main__':
    parser = argparse.ArgumentParser(
        prog="referi",
        description='Supercat referi',
        epilog="""
        lets play!
        """
    )
    parser.add_argument(
        'player1',
        metavar='player1',
        type=str,
        help='first player'
    )
    parser.add_argument(
        'player2',
        metavar='player2',
        type=str,
        help='second player'
    )

    args = parser.parse_args()

    players = [None, None]

    for p in range(2):
        p_spec = getattr(args, 'player%d'%(p+1))
        try:
            if p_spec in default_players:
                players[p] = importlib.import_module('players.' + p_spec)
            elif os.path.isfile(p_spec):
                players[p] = importlib.import_module(p_spec.split('.')[0])
            else:
                print ('Wrong player: player%d'%p)
        except ValueError:
            print ("Error importing player%d"%p)

    main(players)
